# * 과제 수행 목표: 한글 text를 대상으로 한 텍스트마이닝 적용
# * 데이터 출처: Sample 데이터 (프로그램 내 가상으로 생성)
# * 텍스트 데이터: 메일 제목
# * 예측 항목: Spam 여부 판단
# * 어휘 분류 기준: 카테고리 별 단어 출현 횟수 (어미, 조사, 마침표 제거)
# * 판정 기준: 나이브 베이즈 분류(Naive Bayes classifier) 알고리즘
# * 분석 결과 출력
# <분석결과>
# * 카테고리별 평가 점수: [('광고', -19.485641988358296), ('중요', -20.63806741338132)]
# * 판정 결과 = 광고
# * 판정에 영향을 미친 어휘
# 세         : 3회
# 일         : 3회
# 파격        : 1회
# 오늘        : 1회
# 30%       : 1회
# 할인        : 1회
# 쿠폰        : 1회
# 선물        : 1회
# .......
# * 결과 해석
# '재고 정리 할인, 무료 배송' 과 같은 텍스트는 적은 학습량에도 정답을 예측 할 수 있었음
# 한글 텍스트 마이닝은 영문과 달리 학습용 데이터를 쉽게 찾기 어려우므로
# OpenAPI 및 크롤링을 통하여 다양한 데이터를 수집하여야 함
# 베이지안 필터 클래스를 개선하여 데이터 입출력 및 영향도와 관련된 다양한 평가지표를
# 제공해야 함
# 분석 데이터가 늘어날 수록 텍스트 마이닝 절차를 세분화 하도록 프로그램 또한 모듈화가 되어야함
# 분석하는 텍스트의 분야에 따라 향후 유의어 사전을 구축하는 방향으로 개선되어야 함

from bayes import BayesianFilter
import operator
bf = BayesianFilter()
# 텍스트 학습
bf.fit("파격 세일 - 오늘까지만 30% 할인", "광고")
bf.fit("쿠폰 선물 & 무료 배송", "광고")
bf.fit("현데계 백화점 세일", "광고")
bf.fit("봄과 함께 찾아온 따뜻한 신제품 소식", "광고")
bf.fit("인기 제품 기간 한정 세일", "광고")
bf.fit("오늘 일정 확인", "중요")
bf.fit("프로젝트 진행 상황 보고","중요")
bf.fit("계약 잘 부탁드립니다","중요")
bf.fit("회의 일정이 등록되었습니다.","중요")
bf.fit("오늘 일정이 없습니다.","중요")
# 예측
pre, scorelist = bf.predict("재고 정리 할인, 무료 배송")

print('\n<분석결과>')
print(f'* 카테고리별 평가 점수: {scorelist}')
print("* 판정 결과 =", pre)

effective_words = sorted(bf.word_dict[pre].items(),key=operator.itemgetter(1),reverse=True)
print('* 판정에 영향을 미친 어휘')
for word_set in effective_words:
    print(f'{word_set[0]:<10}: {word_set[1]}회')
